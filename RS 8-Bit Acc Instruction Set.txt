Started Jun 25 2021
Ammended Nov 16 2021
Ammended Jun 12 2022 (figured out Negate and Double)
Ammended Jun 30 2022 (uploaded to Github, and did some reorganization)
Ammended Jul 6 2022 (Converted to Hex-Friendly Function Codes)

Original plan:
L-FFF-S-RRR <--I'd like to keep the bit groupings organized so that the commands are easy to read in Hexadecimal.
(currently, this setup has function codes cross the half-byte boundary, making reading it in Hex look messy)

L = Load.  If 1, FFFSRRR will be taken as an integer and added to the Accumulator. (Signed or unsigned?)
FFF = 3 bit Function code.
S = Set, chooses which "set" of instructions to use.  1 for Arithmetic, 0 for Branching and Memory
RRR = 3-bit Register code.  This is where ALU takes data from, or where ACC writes data to.

==Alternate Hex-Friendly Proposal==
L-RRR-FFFF <-- The down-side is that instructions will read "$A Add" instead of "Add $A".  Reverse Polish Notation?

L = Load, but 0 means Load data (Add 0-RRR-FFFF to Accumulator), and 1 means use Function
RRR = 3 bit register code.  Upper hex will always end up "looking" like 8-F.  Registers 8,9,A,B,C,D,E,F?
FFFF = 4 Bit function code, but 0000 (0) and 1000 (8) mean use RRR to choose a Zero-Operand Arithmetic or a Branching operation.

Function wishlist:
Zero-Op functions:
	Right-Shift Acc
	Halve Acc (Arithmetic right shift that preserves negative)
	Double Acc (Left Shift)
	Clear Acc
	Fill Acc
	Invert Acc
	Negate Acc <-[Might not be possible with current ALU]
	Increment Acc
	Decrement Acc
One-Op Arithmetic:
	Add to Acc
	Sub from Acc
	AND with Acc (Bit Select)
	OR with Acc (Bit Set)  <-[Might not be possible with current ALU]
	AND not with Acc (Bit Reset)
	XOR with Acc (Bit Toggle)
Memory Operations:
	Copy Acc to Reg (Acc preserved)
	Move Acc to Reg (resets Acc to 0)
	Load Reg to Acc (overwrites Acc with Reg)
	Swap Acc with Reg (each takes the other's data.  Could speed some things up if possible)
	Push Acc to Stack, and load Reg into Acc (Push/Pop probably better than Swap)
	Pop  Stack into Acc, and write Acc into Reg (I need to make a Stack, though)
Branching: 
(Zero-Op instructions, since I probably can't calculate and jump at the same time)
	BEQ Branch if Acc is 0 (Branch to where?  Address stored in Special Jump Register)
	BNE Branch if Acc is not 0
	BLT Branch if Acc is negative
	BGE Branch if Acc is not negative
	Unconditional Jump (possibly not needed, since I can just clear Acc befor BEQ)
	JMS Jump to Subroutine (Pushes Instruction pointer to a Stack)
	RET Return from Subroutine (Pops Stack into Instruction pointer)

ALU Actions: Acc = Acc + B
(*)Carry-In: +1
(*)Flood Carry: Acc XNOR B
(*)Extract Carry: L-Shift of Acc AND B
(*)Right-Shift
(*)High Bit Dupe <-- Used only for Arithmetic Right-Shift (so that negative numbers may be halved [round down])
(*)Invert B Input
(*)Flood B Input (force high)
(*)Invert Acc (Adds 1 tick of delay to data loop, but that probably won't matter)
(*)Divert Acc (Sends Acc output to Registers, rather than ALU) <-- Maybe this is a dumb idea and should just be "Block Acc".  Why would the registers ever need to be shielded from Acc output?  Just don't write.

(*)Write Acc (Isn't this...ALWAYS used?  Maybe the command should be "Block Writing")
(-)Write to Flags (Not Acc) <-- Used to make the Compare function work without messing with stored data.
(-)Write to Register

(-)Perform Jump
(-)Push Instruction Stack
(-)Pop Instruction Stack
(-)Push Data Stack
(-)Pop Data Stack

(-)Zero Flag
(-)Negative Flag
(-)Overflow Flag


==Function Codes==
*Single Operand Instructions*
-Arithmetic-
1-RRR-0-000 Zero-Op Arithmetic (RRR controls function instead)
1-RRR-0-001 Add (Acc + Reg) 		{Default}
1-RRR-0-010 Compare (Acc - Reg) 		{Invert B, Carry-In, Block Acc Write, Write to Flags}
1-RRR-0-011 Subtract (Acc - Reg)		{Invert B, Carry-In}
1-RRR-0-100 Select (Acc AND Reg) 		{Extract Carry, Right-Shift}
1-RRR-0-101 Toggle (Acc XOR Reg)		{Invert B, Flood Carry}
1-RRR-0-110 Reset (Acc AND not Reg)	{Invert B, Extract Carry, Right-Shift}
1-RRR-0-111 Set (Acc OR Reg) <--Might not be possible in ALU (Can be done in 2 steps though:  Reset bits, then Add or XOR new value)

-Memory Operations-
1-RRR-1-000 Branching Instructions (RRR controls function instead)
1-RRR-1-001 Load Acc from Reg {Divert Acc} (Acc gets 0 + Reg)
1-RRR-1-010 Move Acc into Reg {Divert Acc, Write to Reg, Invert B, Flood B} (Acc gets 0 + 0)
1-RRR-1-011 Copy Acc into Reg {Divert Acc, Write to Reg, Block Acc Write} (Acc unchanged)
1-RRR-1-100 ?
1-RRR-1-101 Swap Acc with Reg {Divert Acc, Write to Reg}<--Might not be stable (and possibly a BAD IDEA in general, though it saves a cycle now and then.)
1-RRR-1-110 Push Acc to Stack, Load Acc from Reg  <--Requires additional hardware!  Is there room?
1-RRR-1-111 Pop Stack into Acc, Move old Acc into Reg

*Zero-Operand Instructions*
-Branching-		(Comparison Flags will be interpreted from an Accumulator-centric viewpoint.  BLT = Was the Accumulator less than that other number?)
1-000-0-000 JMP Branch to value in Jump Register. No conditions, no stack.
1-001-0-000 BLT Branch to JReg if Acc highest bit is 1  (Acc < 0 in 2's complement)
1-010-0-000 BEQ Branch to JReg if OR of Acc's bits is 0 (Acc == 0)
1-011-0-000 JMS Jump and Push IP to I-Stack <-- Instruction Stack will be a VITALLY IMPORTANT component!!!!
1-100-0-000 RET Pop I-Stack into IP then Jump
1-101-0-000 BNE Branch to JReg if OR of Acc's bits is 1 (Acc != 0)
1-110-0-000 BGE Branch to JReg if Acc highest bit is 0 (Acc >= 0 in 2's complement)
1-111-0-000 Pause Execution (Await Input)

-Zero-Operand Arithmetic-
1-000-1-000 Clear Acc 			{Flood B, Invert B, Extract Carry} <-- Not necessary? Just "MOV $0" or "Acc AND $0"
1-001-1-000 Increment 			{Flood B, Invert B, Carry-In} <-- Not necessary? 1-000-0-001 (Load +1)
1-010-1-000 R-Shift			{Flood B, Invert B, R-Shift} (Acc + 0, R-shifted)
1-011-1-000 Invert Acc			{Flood B, Invert B, Flood Carry} (Acc XNOR 0)
1-100-1-000 L-Shift (Double)		{Flood B, Extract Carry} (Acc AND -1 but L-Shifted)
1-101-1-000 Negate Acc			{Flood B, Invert B, Invert Acc, Carry-In} <-- Important enough to justify "Inv Acc"?
1-110-1-000 AR-Shift (Halve)		{Flood B, Invert B, Right-Shift, Duplicate highest bit} <-- Important enough for its own Op?
1-111-1-000 Decrement			{Flood B} (Acc + -1)

Registers:
0: Zero <-- Do I need this if I can just Clear Acc and Flood+Invert B?
1: Jump Reg (Could these be relative jumps?  Probably not needed with 7 bits of direct loading.)
2: Mem Pointer
3: Mem Read/Write
4: $B
5: $C
6: $D
7: $E

Hex-Friendly Register Scheme: 
("Instructions" will always begin with 1, so doing anything with register address 2 will have the hex look like "A", for example)
8: Mem Pointer
9: Mem Read/Write
A: $A
B: $B
C: $C 
D: $D
E: Jump Register
F: User Input/Output


